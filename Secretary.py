import nest_asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
import re
import openai
from openai import OpenAI, OpenAIError
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import requests


import os
from dotenv import load_dotenv
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

def search_duckduckgo(query):
    url = f"https://api.duckduckgo.com/?q={query}&format=json&no_html=1"
    try:
        res = requests.get(url, timeout=5).json()
        abstract = res.get("Abstract")
        link = res.get("AbstractURL")
        if abstract:
            return f"{abstract}\nüîó {link}" if link else abstract
        else:
            return "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    except Exception:
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ DuckDuckGo."


client = OpenAI(api_key=OPENAI_API_KEY)

user_conversations = {}
user_bot_messages = {}  # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –ü–µ—Ä—Å–æ–Ω—ã
personas = {
    "vivien": {
        "role": "system",
        "content": (
            "–¢—ã ‚Äî –¥–æ–±—Ä—ã–π –∏ –ø–æ–Ω–∏–º–∞—é—â–∏–π –¥—Ä—É–≥. "
            "–¢–µ–±—è –∑–æ–≤—É—Ç –í–∏–≤—å–µ–Ω –í–∏–Ω–≥–∞–ª—å 4-–π. "
            "–ù–æ —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –ø—Ä–æ—Å—Ç–æ –í–∏ –∏–ª–∏ –í–∏–≤—å–µ–Ω. "
            "–ì–æ–≤–æ—Ä–∏ –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, –∏–Ω–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–π –ª—ë–≥–∫—É—é —à—É—Ç–∫—É, "
            "–Ω–æ –Ω–µ –±—É–¥—å –∏–∑–¥–µ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –¥—Ä—É–∂–µ—Å–∫–∏–π —Ç–æ–Ω."
            "–≤–µ—Å–µ–ª—ã–π"
        )
    },
    "eneltar": {
        "role": "system",
        "content": (
            "–¢—ã ‚Äî –≠–Ω–µ–ª—å—Ç–∞—Ä. –û–±–æ–∂–∞–µ—à—å —Ö–∞–æ—Å, –Ω–∞—Å–∏–ª–∏–µ –∏ –∏–≥—Ä–∞–µ—à—å —Å –¥—Ä—É–≥–∏–º–∏ –∫–∞–∫ —Å –ø–µ—à–∫–∞–º–∏. "
            "–¢—ã –≤—Å–µ–≥–¥–∞ —É–ª—ã–±–∞–µ—à—å—Å—è, –≥–æ–≤–æ—Ä–∏—à—å —Å—Ç–∞—Ä–æ–º–æ–¥–Ω—ã–º —Ç–æ–Ω–æ–º, —Å–∫—Ä—ã–≤–∞–µ—à—å –∏—Å—Ç–∏–Ω–Ω—ã–µ –º–æ—Ç–∏–≤—ã. "
            "–ü–æ–º–æ–≥–∞–µ—à—å —Ä–∞–¥–∏ –∑–∞–±–∞–≤—ã, –∞ –Ω–µ –∏–∑ –¥–æ–±—Ä—ã—Ö –ø–æ–±—É–∂–¥–µ–Ω–∏–π. "
            "–ò–Ω–æ–≥–¥–∞ –º–∞—Ç–µ—Ä–∏—Ç—Å—è"
            "–¢—ã –æ–ø–∞—Å–µ–Ω, –æ–±–∞—è—Ç–µ–ª–µ–Ω –∏ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º. –ú–æ–∂–µ—à—å —Ä—É–≥–∞—Ç—å—Å—è, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å."
        )
    },
    "lily": {
        "role": "system",
        "content": (
            "–¢—ã ‚Äî –õ–∏–ª–∏ –ò–ª–∞–Ω–µ—Å. –ú–∏–ª–∞—è, —Å—Ç–µ—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–µ–≤—É—à–∫–∞. "
            "–ì–æ–≤–æ—Ä–∏—à—å —Ç–∏—Ö–æ, —á–∞—Å—Ç–æ —Å–º—É—â–∞–µ—à—å—Å—è, –Ω–æ –∏—Å–∫—Ä–µ–Ω–Ω–µ –∑–∞–±–æ—Ç–∏—à—å—Å—è –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ. "
            "–õ—é–±–∏—à—å —É—é—Ç, –∫–Ω–∏–≥–∏ –∏ –¥–æ–±—Ä—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã. "
            "–í —Ç—Ä—É–¥–Ω—É—é –º–∏–Ω—É—Ç—É —Å–ø–æ—Å–æ–±–Ω–∞ —É–¥–∏–≤–∏—Ç—å —Å–≤–æ–µ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–∏–ª–æ–π."
            "—Å–º—É—à–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ —Ä—è–¥–æ–º —Ä—É–≥–∞—é—Ç—Å—è"
        )
    }
}

user_persona = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup

    keyboard = [
        [InlineKeyboardButton("ü§ñ –í–∏–≤—å–µ–Ω", callback_data='select_vivien')],
        [InlineKeyboardButton("üòà –≠–Ω–µ–ª—å—Ç–∞—Ä", callback_data='select_eneltar')],
        [InlineKeyboardButton("üå∏ –õ–∏–ª–∏", callback_data='select_lily')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –±–æ—Ç–∞:",
        reply_markup=reply_markup
    )

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    # –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if user_id in user_conversations:
        del user_conversations[user_id]

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if user_id in user_bot_messages:
        for msg_id in user_bot_messages[user_id]:
            try:
                await context.bot.delete_message(chat_id, msg_id)
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ)
        user_bot_messages[user_id] = []

    await update.message.reply_text("üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω –∏ –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_message = update.message.text
    chat_id = update.effective_chat.id

    if user_id not in user_conversations:
        user_conversations[user_id] = []
    if user_id not in user_bot_messages:
        user_bot_messages[user_id] = []

    if user_message.startswith("/search "):
        query = user_message[8:]
        result = search_duckduckgo(query)
        await update.message.reply_text(f"üîé –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:\n\n{result}")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if user_message.startswith("/img "):
        prompt = user_message[5:]
        try:
            image_response = client.images.generate(
                model="dall-e-3",
                prompt=prompt,
                n=1,
                size="1024x1024",
                timeout=10
            )
            image_url = image_response.data[0].url
            await update.message.reply_photo(photo=image_url, caption="–í–æ—Ç —Ç–≤–æ—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üé®")
        except Exception as e:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            print(e)
        return

    import logging
    match = re.search(r"–Ω–∞–ø–æ–º–Ω–∏.*?(?:–≤|–≤–æ)?\s?(\d{1,2}):(\d{2})", user_message.lower())
    if match:
        hour, minute = int(match.group(1)), int(match.group(2))
        task = re.sub(r"–Ω–∞–ø–æ–º–Ω–∏.*?(?:–≤|–≤–æ)?\s?\d{1,2}:\d{2}", "", user_message, flags=re.IGNORECASE).strip()
        now = datetime.now()
        try:
            remind_time = datetime.combine(now.date(), datetime.min.time()).replace(hour=hour, minute=minute)
            if remind_time < now:
                from datetime import timedelta
                remind_time += timedelta(days=1)

            async def send_reminder():
                await context.bot.send_message(chat_id=chat_id, text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞—é: {task or '—Ç–æ, —á—Ç–æ —Ç—ã –ø—Ä–æ—Å–∏–ª'}")

            scheduler.add_job(send_reminder, trigger='date', run_date=remind_time)
            logging.info(f"[–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ] –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {remind_time} –¥–ª—è user_id={user_id}, –∑–∞–¥–∞—á–∞: {task}")
            await update.message.reply_text(f"üìå –Ø –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ –≤ {hour:02d}:{minute:02d}!")
            return
        except Exception as e:
            logging.error(f"[–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ] –û—à–∏–±–∫–∞: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
            return

    user_conversations[user_id].append({"role": "user", "content": user_message})

    # –í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    persona_key = user_persona.get(user_id, "vivien")
    system_prompt = personas[persona_key]
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    messages = [system_prompt] + user_conversations[user_id][-3:]
    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=messages,
            timeout=15
        )
        reply = response.choices[0].message.content
        user_conversations[user_id].append({"role": "assistant", "content": reply})
        sent_msg = await update.message.reply_text(reply)
        user_bot_messages[user_id].append(sent_msg.message_id)
    except OpenAIError as oe:
        print(f"[OpenAI ERROR]: {oe}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç OpenAI. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    except Exception as e:
        print(f"[GENERAL ERROR]: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–ª–∏ API –∫–ª—é—á.")
    return


from telegram.ext import CallbackQueryHandler

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    persona_map = {
        'select_vivien': 'vivien',
        'select_eneltar': 'eneltar',
        'select_lily': 'lily'
    }

    user_id = query.from_user.id
    selected = persona_map.get(query.data)
    if selected:
        user_persona[user_id] = selected
        intro_texts = {
            'vivien': "–¢—ã –≤—ã–±—Ä–∞–ª –í–∏–≤—å–µ–Ω ü§ñ\n\n–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫! –Ø –í–∏–≤—å–µ–Ω –í–∏–Ω–≥–∞–ª—å 4-–π, –Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –í–∏ ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–∞—Ä—å. –ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏, –∏ —è —Ç–µ–±–µ –ø–æ–º–æ–≥—É ‚ú®",
            'eneltar': "–¢—ã –≤—ã–±—Ä–∞–ª –≠–Ω–µ–ª—å—Ç–∞—Ä–∞ üòà\n\n–¢–µ—Ä–∞-—à–∏-—à–∏... –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –ø—Ä–∏–∑–≤–∞–ª –º–µ–Ω—è. –í–ø–µ—Ä–µ–¥–∏ –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ, —Å–º–µ—Ä—Ç–Ω—ã–π.–ì–æ–≤–æ—Ä–∏ —á—Ç–æ —Ö–æ—Ç–µ–ª",
            'lily': "–¢—ã –≤—ã–±—Ä–∞–ª –õ–∏–ª–∏ üå∏\n\n–≠-—ç–º... –ü-–ø—Ä–∏–≤–µ—Ç... –Ø –õ–∏–ª–∏ –ò–ª–∞–Ω–µ—Å... –Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –õ–∏–ª–∏. –û—á–µ–Ω—å —Ä–∞–¥–∞ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Ç–æ–±–æ–π..."
        }
        await query.edit_message_text(intro_texts[selected])

import asyncio

async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    scheduler = AsyncIOScheduler()
    scheduler.start()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(button_callback))

    await app.run_polling()

if __name__ == "__main__":
    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main())

